package com.company;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.Set;

public class UserInterface extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public UserInterface() {
        directionary = new Directionary();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        //Initialize
        topPanel = new javax.swing.JPanel();
        resetListBtn = new javax.swing.JButton();
        historyBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        endPanel = new javax.swing.JPanel();
        guessDefinitionBtn = new javax.swing.JButton();
        guessWordBtn = new javax.swing.JButton();
        westPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        definitionInput = new javax.swing.JTextArea();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        wordInput = new javax.swing.JTextField();
        centerPanel = new javax.swing.JPanel();
        searchInput = new javax.swing.JTextField();
        comboBox = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        //Top Panel

        topPanel.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        resetListBtn.setText("Reset List");
        resetListBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetActionPerformed();
            }
        });

        historyBtn.setText("History");
        historyBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                historyActionPerformed();
            }
        });

        jLabel4.setText("Hint every day");


        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
                topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                                .addComponent(resetListBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(historyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
                topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(topPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(resetListBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(historyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27))
        );

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);
        //End Panel

        endPanel.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        guessDefinitionBtn.setText("Guess Definition");
        guessDefinitionBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                guessDefiActionPerformed();
            }
        });

        guessWordBtn.setText("Guess Slang Words");
        guessWordBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                guessWordActionPerformed();
            }
        });



        javax.swing.GroupLayout endPanelLayout = new javax.swing.GroupLayout(endPanel);
        endPanel.setLayout(endPanelLayout);
        endPanelLayout.setHorizontalGroup(
                endPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, endPanelLayout.createSequentialGroup()
                                .addContainerGap(550, Short.MAX_VALUE)
                                .addComponent(guessDefinitionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(guessWordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        endPanelLayout.setVerticalGroup(
                endPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(endPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(endPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(guessWordBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                        .addComponent(guessDefinitionBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        getContentPane().add(endPanel, java.awt.BorderLayout.PAGE_END);
        //West Panel

        westPanel.setBorder(javax.swing.BorderFactory.createLineBorder(null));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Slang words");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Definition");

        definitionInput.setColumns(5);
        definitionInput.setRows(5);
        definitionInput.setLineWrap(true);
        definitionInput.setWrapStyleWord(true);

        jScrollPane1.setViewportView(definitionInput);
        jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);

        addBtn.setText("Add");
        addBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addActionPerformed();
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteActionPerformed();
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateActionPerformed();
            }
        });

        clearBtn.setText("Clear");
        clearBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearActionPerformed();
            }
        });

        wordInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordInputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout westPanelLayout = new javax.swing.GroupLayout(westPanel);
        westPanel.setLayout(westPanelLayout);
        westPanelLayout.setHorizontalGroup(
                westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(westPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                                        .addGroup(westPanelLayout.createSequentialGroup()
                                                .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jLabel2))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, westPanelLayout.createSequentialGroup()
                                                .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap())
                        .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(westPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(wordInput)
                                        .addContainerGap()))
        );
        westPanelLayout.setVerticalGroup(
                westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(westPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addGap(77, 77, 77)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56)
                                .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(34, Short.MAX_VALUE))
                        .addGroup(westPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(westPanelLayout.createSequentialGroup()
                                        .addGap(62, 62, 62)
                                        .addComponent(wordInput, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(400, Short.MAX_VALUE)))
        );

        getContentPane().add(westPanel, java.awt.BorderLayout.LINE_START);
        //Center Panel

        searchBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchBtnActionPerformed(e);
            }
        });

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Slang Words", "Definition" }));

        searchBtn.setText("Search");

        String[] columnNames = {"Slang Word", "Definition"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

        tableSlang = new MySlangTable(tableModel);
        tableSlang.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                selectItemTableSlandEvent(e);
            }
        });

        tableSlang.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(tableSlang);
        tableSlang.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
                centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(centerPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
                                        .addGroup(centerPanelLayout.createSequentialGroup()
                                                .addComponent(searchInput)
                                                .addGap(18, 18, 18)
                                                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        centerPanelLayout.setVerticalGroup(
                centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(centerPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(searchInput)
                                        .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                        .addComponent(comboBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                                .addContainerGap())
        );

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>

    private void guessWordActionPerformed(){
        HashMap<String, String> questionData = directionary.get4RandomWords();

        String[] options = new String[4];
        int index = 0;
        Set<String> keySet = questionData.keySet();
        for (String key : keySet)
            options[index++] = key;

        String questionDefi = null;
        Random random = new Random();
        String keyQuestion = options[random.nextInt(0, 4)];
        questionDefi = questionData.get(keyQuestion);

        while (true){
            int response = JOptionPane.showOptionDialog(null,
                    "What is the slang word of '" + questionDefi + "' ?",
                    "Title",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                    null, options, null);

            String myAnswer = options[response];
            if (questionData.get(myAnswer).equals(questionDefi)) {
                JOptionPane.showMessageDialog(null,
                        "Correct Answer !!",
                        "Result",
                        JOptionPane.PLAIN_MESSAGE);

                break;
            }
            else{
                int confirm = JOptionPane.showConfirmDialog(null,
                                                "Your answer is incorrect !! Do you want continue ?",
                                                "Result",
                                                JOptionPane.YES_NO_OPTION);

                if (confirm != JOptionPane.YES_OPTION)
                    break;
            }
        }



    }

    private void guessDefiActionPerformed(){

    }

    private void wordInputActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }


    //WEST PANEL action listener
    private void clearActionPerformed(){
        wordInput.setText("");
        definitionInput.setText("");
        tableSlang.clearData();
    }

    private void deleteActionPerformed(){
        String word = wordInput.getText();
        String definition = definitionInput.getText();
        if (word.equals("")) {
            JOptionPane.showMessageDialog(null, "You don't fill word input", "Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(definition.equals("")){
            JOptionPane.showMessageDialog(null, "You don't fill definition input", "Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if (!directionary.checkWordExists(word)){
            JOptionPane.showMessageDialog(null, "Your Word is not valid", "Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if (!directionary.checkDefiExists(word, definition)){
            JOptionPane.showMessageDialog(null, "Your Definition is not valid", "Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }


        //delete on GUI
        tableSlang.deleteSelectedRow();

        //Delete on Directionary
        directionary.deleteOneElement(word, definition);

        wordInput.setText("");
        definitionInput.setText("");
    }

    private void addActionPerformed(){
        String word = wordInput.getText();
        String definition = definitionInput.getText();

        if (word.equals("")) {
            JOptionPane.showMessageDialog(null, "You don't fill word input", "Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else if(definition.equals("")){
            JOptionPane.showMessageDialog(null, "You don't fill definition input", "Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            if (!directionary.checkWordExists(word)){
               //Slang Word Chưa tồn tại

                //Add tren directionary
                directionary.insertNewElement(word, definition);

                //Add tren giao JTable
                String[] row = {word, definition};
                tableSlang.addData(row);

            }
            else {
                if (directionary.checkDefiExists(word, definition)){
                    Object[] options = {"Overwrite", "Duplicate"};
                    int result = JOptionPane.showOptionDialog(null,
                            "Do you want to overwrite or duplicate this ?",
                            "Add",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            null);


                    if (result == 1){ //duplicate
                        String[] row = {word, definition};
                        tableSlang.addData(row);
                        directionary.insertToExistsElement(word, definition);
                    }

                }
                else {
                    directionary.insertToExistsElement(word, definition);

                    String[] row = {word, definition};
                    tableSlang.addData(row);

                }

            }

            JOptionPane.showMessageDialog(null, "Add new word successfully !!", "Add", JOptionPane.INFORMATION_MESSAGE);

        }
    }

    private void updateActionPerformed(){
        String newWord = wordInput.getText();
        String newDefinition = definitionInput.getText();

        //Kiểm tra xem đã chọn chưa
        if (tableSlang.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "You don't select any data on table !!", "Update", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else {
            int row = tableSlang.getSelectedRow();
            String oldWord = (String) tableSlang.getValueAt(row, 0);
            String oldDefi = (String) tableSlang.getValueAt(row, 1);

            //Cap Nhat o GUI
            tableSlang.updateSelectedRow(newWord, newDefinition);

            //Cap Nhat o Diẻctionary
            directionary.updateData(oldWord, oldDefi, newWord, newDefinition);

            JOptionPane.showMessageDialog(null, "Update Successfully !!", "Update", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    //TOP PANEL action listener
    private void resetActionPerformed(){
        //Reset on Data
        directionary.resetData();
        //Reset on GUI
        tableSlang.clearData();
        wordInput.setText("");
        definitionInput.setText("");

        //Annouce message
        JOptionPane.showMessageDialog(null, "Reset data successfully !!", "Reset", JOptionPane.INFORMATION_MESSAGE);
    }



    private void historyActionPerformed(){
        ArrayList<String[]> historyData = directionary.getHistory();

        tableSlang.clearData();
        for (String[] data : historyData)
            tableSlang.addData(data);
    }

    //CENTER PANEL action listener
    private void selectItemTableSlandEvent(MouseEvent evt){
        String[] data = tableSlang.getSelectedData();
        String slangWord =data[0];
        String definition = data[1];

        wordInput.setText(slangWord);
        definitionInput.setText(definition);
    }

    private void searchBtnActionPerformed(ActionEvent evt){
        //Check search box is empty or not
        String keyWord= searchInput.getText();
        if (keyWord.equals("")) {
            JOptionPane.showMessageDialog(null, "Search box is empty", "Search error", JOptionPane.ERROR_MESSAGE);
            return;
        }


        //get ArrayList data
        String choice = (String) comboBox.getSelectedItem();
        HashMap<String, ArrayList<String >> result = null;

        if (choice.equals("Definition"))
            result = directionary.findByDefinition(keyWord);
        else{
            directionary.saveSlangWord(keyWord);
            result = directionary.findByWords(keyWord);
        }

        if (result == null) {
            JOptionPane.showMessageDialog(null, "Don't find any result ", "Search", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        System.out.println("Choice : " + choice);

        //Add data
        tableSlang.clearData();
        Set<String> keySet = result.keySet();
        for (String key : keySet){
            ArrayList<String> listDefi = result.get(key);
            for (String defi : listDefi){
                String[] rowData = {key, defi};
                tableSlang.addData(rowData);
            }

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton clearBtn;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JTextArea definitionInput;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel endPanel;
    private javax.swing.JButton guessDefinitionBtn;
    private javax.swing.JButton guessWordBtn;
    private javax.swing.JButton historyBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton resetListBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchInput;
    private MySlangTable tableSlang;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton updateBtn;
    private javax.swing.JPanel westPanel;
    private javax.swing.JTextField wordInput;

    Directionary directionary;
    // End of variables declaration
}
